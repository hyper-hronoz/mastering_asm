@A оператор - инструкция - мнемокод - комманда

Комаанды работают с данными - операндами 

--Title - Структура программы на языке Asm

Сегмент - независимый поддерживаемый на аппаратном уравне блок памяти и программа на 
языке аасемблер представляет собой совокупный сегмент. Процессор аппаратно поддерживает 6
адресно независимых болоков памяти:

I       | Семент кода
II      | Сегмент данных
III     | Сегмент стека
IV - VI | Дополнительные сегменты

Каждый сегмент содержит совокупность предложений языка asm, и каждое предложение занимает отдельную
стороку.

goto @A - представляет собой символический аналог машинной команды, каждая команда преобразуется в машинный код

Макрокоманда - особенность макрокоманды, короче @data - макрокоманда, команда внутри команды 

ex: asm

mov ax, @data 
mov dx, offset -> mov ax, 0000

Директива - указание транслятору на выполнение некоторого действия

Формат команды:

@ offset st - начальный адрес строки
Начинатеся c метки

Мнемокод:

mov операнд - это же данные | | | | | | | - справа налево читает комманду
add 02, 01
int 21h
exd "python iex 'pass'"

!NB Что отличает дерективу от комманды: - xz

Директивы подразделяются на стандартные и упрощенные


Так блять, как приготовить отчет

1) Тит лист
2) Условие и задание
3) Вариант (Сложить число 15 + - 15)
4) Листинг - код программы
5) Результат выполения программы
6) Вывод - я офигел, я опознал, я приесполнился
!!NB!! - Все в печатном виде

Title - директива начала программы
.model - определяет количество кусков программы .stack .data .code еще можно придумать
.stack - выделение память под стек
.data - начало сегментов данных
.code - код программы 

\* Урощенные директивы, принадлежат только tasm *\
proc - всё дальше процедура
endp - don't forget
end - вообще конец
dx 

Алгоритм выполнения программы

0) - программа сагружается с жесткого диска, где она хранится в ответ на ввод с клавиатуры комманды запуска программы
1) - операционная система загружается программу и настраивает ее в области памяти
2) - cообщает процессору начальный адрес загруженной программы и инециализирует процесс ее выполенния
3) - процессор считывает из памяти первую комманду программы 
ex: mov ax, X
находит в памяти данные необходимые для ее выполнения, подставляет куда надо и выполеняет затем возвращает в память или в регистр результат 
выполняемой комманды
4) - процессор переходи к следующей комманде и таак до конца программы 
5) - передается выполение операционный программы (Прочитай Хижину Дадюшки Тома)

Прерывание - специальный набор готовых процедур постоянно доступных для использования, означает временное прекращение основного 
процесса выполнения программы на некоторые незапланированные действия

Прерывания:
0) Аппаратное
1) Программное

int - прерывние iterrupt

Алгоритм применения функции любого прерывания:

0) Поместить номер вызываемого прорывания в регистр ah - accumulator register. -> 09h
                                                                                  07h
                                                                                  60h
                                                                                  02h
                                                                                  0Eh

mov ah, 09h

1) Подготовить если необходимо данные для прерывания
2) Вызвать прерывание
3) Сохранить или обработать выходные данные

mov ax, c00h
int 21
всё стираем говорим досвидание










